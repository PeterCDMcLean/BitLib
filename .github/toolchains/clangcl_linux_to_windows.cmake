set(CMAKE_SYSTEM_NAME Windows)
set(CMAKE_SYSTEM_PROCESSOR amd64)

set(CMAKE_C_COMPILER clang-cl)
set(CMAKE_C_FLAGS "/winsdkdir:$ENV{WINSDKDIR} /vctoolsdir:$ENV{VCTOOLSDIR} --target=x86_64-pc-windows-msvc -fuse-ld=lld-link /imsvc $ENV{VCTOOLSDIR}/include /imsvc $ENV{WINSDKDIR}/include/ucrt /imsvc $ENV{WINSDKDIR}/include/um /imsvc $ENV{WINSDKDIR}/include/shared -Wno-unused-command-line-argument ${CMAKE_C_FLAGS}")
set(CMAKE_CXX_COMPILER clang-cl)
set(CMAKE_CXX_FLAGS "/winsdkdir:$ENV{WINSDKDIR} /vctoolsdir:$ENV{VCTOOLSDIR} --target=x86_64-pc-windows-msvc -fuse-ld=lld-link /imsvc $ENV{VCTOOLSDIR}/include /imsvc $ENV{WINSDKDIR}/include/ucrt /imsvc $ENV{WINSDKDIR}/include/um /imsvc $ENV{WINSDKDIR}/include/shared -Wno-unused-command-line-argument ${CMAKE_CXX_FLAGS}")

set(CMAKE_AR llvm-lib)
set(CMAKE_LINKER lld-link)
set(CMAKE_MT llvm-mt)
set(CMAKE_RC_COMPILER llvm-rc)

set(CMAKE_EXE_LINKER_FLAGS_INIT "/winsdkdir:$ENV{WINSDKDIR}")
set(CMAKE_EXE_LINKER_FLAGS_INIT "${CMAKE_EXE_LINKER_FLAGS_INIT} /vctoolsdir:$ENV{VCTOOLSDIR}")
set(CMAKE_EXE_LINKER_FLAGS_INIT "${CMAKE_EXE_LINKER_FLAGS_INIT} /libpath:$ENV{WINSDKDIR}/lib/um/x86_64")
set(CMAKE_EXE_LINKER_FLAGS_INIT "${CMAKE_EXE_LINKER_FLAGS_INIT} /libpath:$ENV{WINSDKDIR}/lib/ucrt/x86_64")
set(CMAKE_EXE_LINKER_FLAGS_INIT "${CMAKE_EXE_LINKER_FLAGS_INIT} /libpath:$ENV{VCTOOLSDIR}/lib/x86_64")

set(CMAKE_SHARED_LINKER_FLAGS_INIT "/winsdkdir:$ENV{WINSDKDIR}")
set(CMAKE_SHARED_LINKER_FLAGS_INIT "${CMAKE_SHARED_LINKER_FLAGS_INIT} /vctoolsdir:$ENV{VCTOOLSDIR}")
set(CMAKE_SHARED_LINKER_FLAGS_INIT "${CMAKE_SHARED_LINKER_FLAGS_INIT} /libpath:$ENV{WINSDKDIR}/lib/um/x86_64")
set(CMAKE_SHARED_LINKER_FLAGS_INIT "${CMAKE_SHARED_LINKER_FLAGS_INIT} /libpath:$ENV{WINSDKDIR}/lib/ucrt/x86_64")
set(CMAKE_SHARED_LINKER_FLAGS_INIT "${CMAKE_SHARED_LINKER_FLAGS_INIT} /libpath:$ENV{VCTOOLSDIR}/lib/x86_64")

set(CMAKE_MODULE_LINKER_FLAGS_INIT "/winsdkdir:$ENV{WINSDKDIR}")
set(CMAKE_MODULE_LINKER_FLAGS_INIT "${CMAKE_MODULE_LINKER_FLAGS_INIT} /vctoolsdir:$ENV{VCTOOLSDIR}")
set(CMAKE_MODULE_LINKER_FLAGS_INIT "${CMAKE_MODULE_LINKER_FLAGS_INIT} /libpath:$ENV{WINSDKDIR}/lib/um/x86_64")
set(CMAKE_MODULE_LINKER_FLAGS_INIT "${CMAKE_MODULE_LINKER_FLAGS_INIT} /libpath:$ENV{WINSDKDIR}/lib/ucrt/x86_64")
set(CMAKE_MODULE_LINKER_FLAGS_INIT "${CMAKE_MODULE_LINKER_FLAGS_INIT} /libpath:$ENV{VCTOOLSDIR}/lib/x86_64")

set(CMAKE_STATIC_LINKER_FLAGS_INIT "${CMAKE_STATIC_LINKER_FLAGS_INIT} /libpath:$ENV{WINSDKDIR}/lib/um/x86_64")
set(CMAKE_STATIC_LINKER_FLAGS_INIT "${CMAKE_STATIC_LINKER_FLAGS_INIT} /libpath:$ENV{WINSDKDIR}/lib/ucrt/x86_64")
set(CMAKE_STATIC_LINKER_FLAGS_INIT "${CMAKE_STATIC_LINKER_FLAGS_INIT} /libpath:$ENV{VCTOOLSDIR}/lib/x86_64")

# Check if the CLANGRTLIB environment variable is set and not empty
if(DEFINED ENV{CLANGRTLIB} AND NOT "$ENV{CLANGRTLIB}" STREQUAL "")
  set(CLANGRTLIB_DIR "$ENV{CLANGRTLIB}")

  # Check if it is a valid directory
  if(IS_DIRECTORY "${CLANGRTLIB_DIR}")
    set(CLANGRTLIB_FILE "${CLANGRTLIB_DIR}/clang_rt.builtins-x86_64.lib")

    # Check if the target lib file exists
    if(EXISTS "${CLANGRTLIB_FILE}")
      message(STATUS "Found clang_rt.builtins-x86_64.lib in ${CLANGRTLIB_DIR}")
      set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /libpath:${CLANGRTLIB_DIR} ${CLANGRTLIB_FILE}")
      set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /libpath:${CLANGRTLIB_DIR} ${CLANGRTLIB_FILE}")
      set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} /libpath:${CLANGRTLIB_DIR} ${CLANGRTLIB_FILE}")
      set(CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} /libpath:${CLANGRTLIB_DIR} ${CLANGRTLIB_FILE}")
    endif()
  endif()
endif()

set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS_INIT} ${CMAKE_EXE_LINKER_FLAGS}" CACHE STRING "Flags used by the linker for all executables." FORCE)
set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS_INIT} ${CMAKE_SHARED_LINKER_FLAGS}" CACHE STRING "Flags used by the linker for all shared libraries." FORCE)
set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS_INIT} ${CMAKE_MODULE_LINKER_FLAGS}" CACHE STRING "Flags used by the linker for all modules." FORCE)
set(CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS_INIT} ${CMAKE_STATIC_LINKER_FLAGS}" CACHE STRING "Flags used by the linker for all static libraries." FORCE)

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)