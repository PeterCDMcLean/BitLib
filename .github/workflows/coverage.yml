name: Coverage

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '**/*.md'


env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo
    
jobs:
  linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]    
        compiler:
          - { compiler: GNU, CC: gcc-11, CXX: g++-11 }

    steps:
    - name: Cancel Workflow Action
      uses: styfle/cancel-workflow-action@0.9.1
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: 'true'
    - uses: conda-incubator/setup-miniconda@v2
      with:
        miniconda-version: "latest"
        activate-environment: test
        channels: conda-forge,defaults
        channel-priority: true
        python-version: 3.8 
    - name: Install requirements
      shell: bash -l {0}
      run: |
        sudo apt install build-essential manpages-dev software-properties-common
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt update && sudo apt install lcov ${{ matrix.compiler.CC }} ${{ matrix.compiler.CXX }}
        sudo apt install libgtest-dev
        conda activate test
        pip install --user lcov
        conda install cppcheck cpplint
        cmake --version

    - name: Configure CMake
      shell: bash -l {0}
      env:
        CC: ${{ matrix.compiler.CC }}
        CXX: ${{ matrix.compiler.CXX }}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        which cpplint
        cmake -Bbuild -DBITLIB_TEST=1 -DBITLIB_COVERAGE=1 -DCMAKE_CXX_CPPCHECK="cppcheck;--std=c++17;--file-filter=*BitLib*" -DCMAKE_CXX_CPPLINT="cpplint;--linelength=140;" 


    - name: Build
      shell: bash -l {0}
      # Build your program with the given configuration
      run: |
        cmake --build build -- -j
      #run: make bitlib-tests

    - name: Test
      shell: bash -l {0}
      run: ctest --test-dir build -j $(nproc --all)
      #run: ./bin/bitlib-tests --gtest_repeat=10 --gtest_break_on_failure --gtest_brief=1

    - name: Run lcov 
      shell: bash -l {0}
      run: |
        lcov --directory build/test/CMakeFiles/bitlib-tests.dir/src --gcov-tool /usr/bin/gcov-11 --output-file lcov.out --include "*bitlib*" -c
        lcov -r lcov.out "*/usr/*" -r lcov.out "*_deps/*" -r lcov.out "*unit-tests*" -r lcov.out "*ext/*" -r lcov.out "*libpopcnt*" -o lcov_filtered.out 

    #- name: Code Coverage Report
      #uses: romeovs/lcov-reporter-action@v0.2.11
      #with:
        #github-token: ${{ secrets.GITHUB_TOKEN }}
        #lcov-file: lcov_filtered.out

    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: lcov_filtered.out 
