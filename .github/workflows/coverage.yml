name: Coverage

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches: [ "master" ]
    paths-ignore:
      - '**/*.md'

jobs:
  coverage:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest] # removed windows-latest
        build_type: [Debug]
        c_compiler: [gcc]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          if [ "${{ matrix.c_compiler }}" = "clang-19" ]; then
            cmake_flags="-DCMAKE_CXX_FLAGS='--coverage -stdlib=libc++'"
            cmake_flags="${cmake_flags} -DCMAKE_C_FLAGS='--coverage'"
            cmake_flags="${cmake_flags} -DCMAKE_EXE_LINKER_FLAGS='-stdlib=libc++'"
            echo "cmake_flags=${cmake_flags}"
            echo "cmake_flags=${cmake_flags}" >> $GITHUB_OUTPUT
          else
            cmake_flags="-DCMAKE_CXX_FLAGS='--coverage'"
            cmake_flags="${cmake_flags} -DCMAKE_C_FLAGS='--coverage'"
            echo "cmake_flags=${cmake_flags}"
            echo "cmake_flags=${cmake_flags}" >> $GITHUB_OUTPUT
          fi

      - name: "Install lcov"
        run: |
          sudo apt-get update
          sudo apt-get install -y lcov

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DBITLIB_TEST=ON
          ${{ steps.strings.outputs.cmake_flags }}
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel

      - name: Test
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --test-dir ${{ steps.strings.outputs.build-output-dir }} --build-config ${{ matrix.build_type }} --output-on-failure --parallel

      - name: Generate Coverage Report
        run: |
          lcov --capture --directory ${{ steps.strings.outputs.build-output-dir }} --output-file coverage.info --ignore-errors mismatch
          lcov --remove coverage.info '/usr/*' '*/_deps/*' '*/include/bitlib/bit-algorithms/libpopcnt.h' '*/utils/test_utils.hpp' '*/test/src/*' --output-file coverage.info
          lcov --list coverage.info
          # Generate an HTML report
          genhtml coverage.info --output-directory out/coverage

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: out/coverage

      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage.info

      - name: Upload to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: coverage.info
          flags: unittests
          name: codecov-coverage-report
