# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches: [ "master" ]
    paths-ignore:
      - '**/*.md'

jobs:
  build:
    runs-on: ${{ matrix.distro }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        include:
          - distro: ubuntu-latest
            os: linux
            compiler: gcc
            c_compiler: gcc
            cpp_compiler: g++
            stdlib: libstdcxx
            preset: benchmark
            target: bitlib-bench
            build_type: Release
          - distro: ubuntu-latest
            os: linux
            compiler: clang
            cpp_compiler: clang++-19
            c_compiler: clang-19
            stdlib: libcxx
            preset: benchmark
            target: bitlib-bench
            build_type: Release
          - distro: ubuntu-latest
            os: linux
            compiler: gcc
            c_compiler: gcc
            cpp_compiler: g++
            stdlib: libstdcxx
            preset: tests
            target: bitlib-tests
            build_type: Debug
          - distro: ubuntu-latest
            os: linux
            compiler: clang
            cpp_compiler: clang++-19
            c_compiler: clang-19
            stdlib: libcxx
            preset: tests
            target: bitlib-tests
            build_type: Debug
          - distro: ubuntu-latest
            os: linux
            compiler: gcc
            c_compiler: gcc
            cpp_compiler: g++
            stdlib: libstdcxx
            preset: coverage
            target: bitlib-tests
            build_type: Debug

    steps:
    - uses: actions/checkout@v4

    - name: "Install Clang 19"
      if: matrix.os == 'linux' && matrix.c_compiler == 'clang-19'
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg lsb-release
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 19
        # Install libc++ and libc++abi for Clang 19
        sudo apt-get install -y libc++-19-dev libc++abi-19-dev

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -S ${{ github.workspace }}
        --preset=${{ matrix.preset }}_${{ matrix.os }}_${{ matrix.compiler }}_${{ matrix.stdlib }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Register Compiler Problem Matcher
      run: echo "::add-matcher::.github/problem_matchers/${{ matrix.compiler}}_problem_matcher.json"

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --target ${{ matrix.target }} --config ${{ matrix.build_type }} --parallel

    - name: Unregister Compiler Problem Matcher
      run: echo "::remove-matcher owner=${{ matrix.compiler}}::"

    - name: Test
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --test-dir ${{ steps.strings.outputs.build-output-dir }} --build-config ${{ matrix.build_type }} --output-on-failure --parallel

    - uses: ./.github/actions/coverage_epilogue
      if: matrix.preset == 'coverage'
      with:
        build-output-dir: ${{ steps.strings.outputs.build-output-dir }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - uses: ./.github/actions/benchmark_epilogue
      if: matrix.preset == 'benchmark'
      with:
        os: ${{ matrix.os }}
        compiler: ${{ matrix.compiler }}
        stdlib: ${{ matrix.stdlib }}
        build-output-dir: ${{ steps.strings.outputs.build-output-dir }}
